# -*- coding: utf-8 -*-
"""TASK 6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cR6GK9YOf9HRrX4rfDweyGf7MaFUEz-S

### <b>By Raksha Choudhary
### <b>Data Science and Bussiness Analytics Internship
### <b>GRIP The Sparks Foundation
### <b>Task6: Create the decision tree classifier and visualize it graphically

###**Importing libraries**
"""

#import the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""###<b>Load the Iris dataset"""

from google.colab import files   # import the files from device
uploaded = files.upload()

dataset=pd.read_csv("Iris.csv")
x=dataset.iloc[:,1:5].values
y=dataset.iloc[:,-1].values

dataset.head(5)   #shows the first five data

print(x)

print(y)

"""###<b>Spliting the data"""

#spliting the dataset into train and test data
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1234)

print(x_train)

print(x_test)

print(y_train)

print(y_test)

"""###<b>Feature Scaling

It is used to normalize the features of data.It standardize the independent features present in the data in a fixed range.
"""

from sklearn.preprocessing import StandardScaler
sc= StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)

print("After scaling:\n",x_train)

print("test data after scaling:\n",x_test)

"""###<b>Training the decision tree classification model"""

from sklearn.tree import DecisionTreeClassifier
clf=DecisionTreeClassifier(criterion='entropy',random_state=0)
clf.fit(x_train,y_train)
print('Decision Tree classifier created')

"""<b> Print Text Representation<br>
Exporting Decision Tree to the text representation can be useful when working on applications whitout user interface
"""

from sklearn import tree
text_representation = tree.export_text(clf)
print(text_representation)

"""###<b>Prediction

Predicting a new result(feeding new data and predicting it class)
"""

print(clf.predict(sc.transform([[6.0,6.8,2.9,0.2]])))

"""Predicting the Test set results"""

y_pred = clf.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""###<B>Making the Confusion Matrix
A confusion matrix is a technique for summarizing the performance of a classification algorithm. Classification accuracy alone can be misleading if you have an unequal number of observations in each class or if you have more than two classes in your dataset.
"""

from sklearn.metrics import confusion_matrix,accuracy_score
from sklearn.metrics import plot_confusion_matrix
cm = confusion_matrix(y_test,y_pred)
print("confusion_matrix:\n",cm)

accuracy = accuracy_score(y_test,y_pred)
print("accuracy of model:\n",accuracy)

"""###<b>Graphical visualization"""

fig = plt.figure(figsize=(14,9))
tree.plot_tree(clf,filled= True)
print('Decision tree')